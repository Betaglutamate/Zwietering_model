GFP <- read.csv("/home/betaglutamate/OneDrive/00_PhD/00_Phd_data/02_Project_Trehalose_synthesis/2020_allruns_before_fitderiv/20210202_m63gly_actually_media/20210204_m63gly_nacl_GFP.csv")
OD <- read.csv("/home/betaglutamate/OneDrive/00_PhD/00_Phd_data/02_Project_Trehalose_synthesis/2020_allruns_before_fitderiv/20210202_m63gly_actually_media/20210204_m63gly_nacl_OD.csv")
library('tidyverse')
library('stringr')
library('broom')
library('ggpubr')
# I moved all functions and graph theme to different script
source("/home/betaglutamate/OneDrive/00_PhD/00_Phd_data/02_Project_Trehalose_synthesis/2020_allruns_before_fitderiv/20201014_OtsB_analysis_functions.R")
OD <- read.csv("/home/betaglutamate/OneDrive/00_PhD/00_Phd_data/02_Project_Trehalose_synthesis/2020_allruns_before_fitderiv/20210202_m63gly_actually_media/20210204_m63gly_nacl_OD.csv")
GFP <- read.csv("/home/betaglutamate/OneDrive/00_PhD/00_Phd_data/02_Project_Trehalose_synthesis/2020_allruns_before_fitderiv/20210202_m63gly_actually_media/20210204_m63gly_nacl_GFP.csv")
# subtract background
OD_time = OD[, 1, drop=F]
OD_mean = rowMeans(OD[1, 2:61])
OD_subtracted = OD[, 2:61]-OD_mean
OD = bind_cols(OD_time, OD_subtracted)
GFP_time = GFP[, 1, drop=F]
GFP_mean = rowMeans(GFP[1, 2:61])
GFP_subtracted = GFP[, 2:61]-GFP_mean
GFP = bind_cols(GFP_time, GFP_subtracted)
# Make it longer
OD.long <-
OD %>%
pivot_longer(2:61,names_to = 'sample') %>%
mutate(group = substr(sample,1,7)) %>%
mutate(type = ifelse(str_detect(group, 'MZ'), "GFP", "WT")) %>%
rename(Time = 'Time.min')
OD
# Make it longer
OD.long <-
OD %>%
pivot_longer(2:61,names_to = 'sample') %>%
mutate(group = substr(sample,1,7)) %>%
mutate(type = ifelse(str_detect(group, 'MZ'), "GFP", "WT")) %>%
rename(Time = 'Time..min.')
# I moved all functions and graph theme to different script
source("/home/betaglutamate/OneDrive/00_PhD/00_Phd_data/02_Project_Trehalose_synthesis/2020_allruns_before_fitderiv/20201014_OtsB_analysis_functions.R")
OD <- read.csv("/home/betaglutamate/OneDrive/00_PhD/00_Phd_data/02_Project_Trehalose_synthesis/2020_allruns_before_fitderiv/20210202_m63gly_actually_media/20210204_m63gly_nacl_OD.csv")
GFP <- read.csv("/home/betaglutamate/OneDrive/00_PhD/00_Phd_data/02_Project_Trehalose_synthesis/2020_allruns_before_fitderiv/20210202_m63gly_actually_media/20210204_m63gly_nacl_GFP.csv")
# subtract background
OD_time = OD[, 1, drop=F]
OD_mean = rowMeans(OD[1, 2:61])
OD_subtracted = OD[, 2:61]-OD_mean
OD = bind_cols(OD_time, OD_subtracted)
GFP_time = GFP[, 1, drop=F]
GFP_mean = rowMeans(GFP[1, 2:61])
GFP_subtracted = GFP[, 2:61]-GFP_mean
GFP = bind_cols(GFP_time, GFP_subtracted)
# Make it longer
OD.long <-
OD %>%
pivot_longer(2:61,names_to = 'sample') %>%
mutate(group = substr(sample,1,7)) %>%
mutate(type = ifelse(str_detect(group, 'MZ'), "GFP", "WT")) %>%
rename(Time = 'Time..min.')
View(OD)
OD
# Make it longer
OD.long <-
OD %>%
pivot_longer(2:61,names_to = 'sample') %>%
mutate(group = substr(sample,1,7)) %>%
mutate(type = ifelse(str_detect(group, 'MZ'), "GFP", "WT")) %>%
rename(Time = 'Time..min.')
# Make it longer
OD.long <-
OD %>%
pivot_longer(2:61,names_to = 'sample') %>%
mutate(group = substr(sample,1,7)) %>%
mutate(type = ifelse(str_detect(group, 'MZ'), "GFP", "WT")) %>%
rename(Time = `Time..min.`)
GFP.long <-
GFP %>%
pivot_longer(2:61,names_to = 'sample') %>%
mutate(group = substr(sample,1,7)) %>%
mutate(type = ifelse(str_detect(group, 'MZ'), "GFP", "WT")) %>%
rename(Time = 'Time.min')
# I moved all functions and graph theme to different script
source("/home/betaglutamate/OneDrive/00_PhD/00_Phd_data/02_Project_Trehalose_synthesis/2020_allruns_before_fitderiv/20201014_OtsB_analysis_functions.R")
OD <- read.csv("/home/betaglutamate/OneDrive/00_PhD/00_Phd_data/02_Project_Trehalose_synthesis/2020_allruns_before_fitderiv/20210202_m63gly_actually_media/20210204_m63gly_nacl_OD.csv")
GFP <- read.csv("/home/betaglutamate/OneDrive/00_PhD/00_Phd_data/02_Project_Trehalose_synthesis/2020_allruns_before_fitderiv/20210202_m63gly_actually_media/20210204_m63gly_nacl_GFP.csv")
# subtract background
OD_time = OD[, 1, drop=F]
OD_mean = rowMeans(OD[1, 2:61])
OD_subtracted = OD[, 2:61]-OD_mean
OD = bind_cols(OD_time, OD_subtracted)
GFP_time = GFP[, 1, drop=F]
GFP_mean = rowMeans(GFP[1, 2:61])
GFP_subtracted = GFP[, 2:61]-GFP_mean
GFP = bind_cols(GFP_time, GFP_subtracted)
# Make it longer
OD.long <-
OD %>%
pivot_longer(2:61,names_to = 'sample') %>%
mutate(group = substr(sample,1,7)) %>%
mutate(type = ifelse(str_detect(group, 'MZ'), "GFP", "WT")) %>%
rename(Time = 'Time..min.')
# Make it longer
OD.long <-
OD %>%
pivot_longer(2:61,names_to = 'sample') %>%
mutate(group = substr(sample,1,7)) %>%
mutate(type = ifelse(str_detect(group, 'MZ'), "GFP", "WT")) %>%
rename(Time = 'Time.min')
GFP.long <-
GFP %>%
pivot_longer(2:61,names_to = 'sample') %>%
mutate(group = substr(sample,1,7)) %>%
mutate(type = ifelse(str_detect(group, 'MZ'), "GFP", "WT")) %>%
rename(Time = 'Time.min')
# Add groups and summarise
OD.long.summarised <-
OD.long %>% group_by(group, Time) %>%
summarise(meanOD = mean(value), n(), sd = sd(value), sem = sd/sqrt(n()))
GFP.long.summarised <- GFP.long %>% group_by(group, Time) %>%
summarise(meanGFP = mean(value), n(), sd = sd(value), sem = sd/sqrt(n()))
#GFP graph
GFP.long.summarised %>%
ggplot(aes(x=Time, y=meanGFP, colour=group))+
geom_line()+
graph_theme
#OD graph
OD.long.summarised %>%
ggplot(aes(x=Time, y=meanOD, colour=group))+
geom_line()+
graph_theme
aligned_df <-
OD.long %>%
mutate(GFP = GFP.long$value, osmolarity=substr(sample,4,7)) %>%
rename(OD = value) %>%
filter(osmolarity != 1000) %>%  ## I Filter out 1000 here because GFP did not grow at this value
group_by(group) %>%
group_split() %>%
map(align_type) %>%
bind_rows() %>%
mutate(GFPdivOD = GFP/OD)
aligned_df <-
OD.long %>%
mutate(GFP = GFP.long$value, osmolarity=substr(sample,4,7)) %>%
rename(OD = value) %>%
filter(osmolarity == 0000) %>%  ## I Filter out 1000 here because GFP did not grow at this value
group_by(group) %>%
group_split() %>%
map(align_type) %>%
bind_rows() %>%
mutate(GFPdivOD = GFP/OD)
aligned_df <-
OD.long %>%
mutate(GFP = GFP.long$value, osmolarity=substr(sample,4,7)) %>%
rename(OD = value) %>%
filter(osmolarity == "0000") %>%  ## I Filter out 1000 here because GFP did not grow at this value
group_by(group) %>%
group_split() %>%
map(align_type) %>%
bind_rows() %>%
mutate(GFPdivOD = GFP/OD)
aligned_df <-
OD.long %>%
mutate(GFP = GFP.long$value, osmolarity=substr(sample,4,7)) %>%
rename(OD = value) %>%
filter(osmolarity == "0000" | osmolarity == "0200") %>%  ## I Filter out 1000 here because GFP did not grow at this value
group_by(group) %>%
group_split() %>%
map(align_type) %>%
bind_rows() %>%
mutate(GFPdivOD = GFP/OD)
alligned_summary <-
aligned_df %>%
group_by(Time, group) %>%
summarise(meanOD = mean(OD), meanGFP= mean(GFP), n(), meanGFPdivOD = mean(GFPdivOD)) %>%
mutate(type = ifelse(str_detect(group, 'MZ'), "GFP", "WT"))
alligned_summary %>%
ggplot(aes(x=Time, y=meanOD, colour=group))+
geom_point(size=0.7)+
graph_theme
aligned_df <-
OD.long %>%
mutate(GFP = GFP.long$value, osmolarity=substr(sample,4,7)) %>%
rename(OD = value) %>%
filter(osmolarity == "0000" | osmolarity == "0200" | osmolarity == "0400") %>%  ## I Filter out 1000 here because GFP did not grow at this value
group_by(group) %>%
group_split() %>%
map(align_type) %>%
bind_rows() %>%
mutate(GFPdivOD = GFP/OD)
aligned_df <-
OD.long %>%
mutate(GFP = GFP.long$value, osmolarity=substr(sample,4,7)) %>%
rename(OD = value) %>%
filter(osmolarity == "0000" | osmolarity == "0200") %>%  ## I Filter out 1000 here because GFP did not grow at this value
group_by(group) %>%
group_split() %>%
map(align_type) %>%
bind_rows() %>%
mutate(GFPdivOD = GFP/OD)
alligned_summary <-
aligned_df %>%
group_by(Time, group) %>%
summarise(meanOD = mean(OD), meanGFP= mean(GFP), n(), meanGFPdivOD = mean(GFPdivOD)) %>%
mutate(type = ifelse(str_detect(group, 'MZ'), "GFP", "WT"))
alligned_summary %>%
ggplot(aes(x=Time, y=meanOD, colour=group))+
geom_point(size=0.7)+
graph_theme
export_df <-
aligned_df%>%
group_by(sample) %>%
group_split() %>%
map(find_growthrate) %>%
bind_rows() %>%
mutate(GFPdivOD = GFP/OD)
export_df <-
aligned_df%>%
group_by(sample) %>%
group_split() %>%
map(find_growthrate) %>%
bind_rows() %>%
mutate(GFPdivOD = GFP/OD)
# Here I complete the export df with the times
export_df <-
export_df %>%
group_by(sample) %>%
group_split() %>%
map(find_exponential_end) %>%
bind_rows()
# Here I calculate the Growthrates
maximum_growthrates_export <-
export_df %>%
group_by(sample) %>%
group_split() %>%
map(find_max_growthrate) %>%
bind_rows()
ggarrange(plotlist=
export_df %>%
group_by(sample) %>%
group_split() %>%
map(~ggplot(.x, aes_string(x = 'Time', y = 'growth_rate')) +
geom_point()+
geom_vline(aes(xintercept = exponential_end))+
graph_theme+
ggtitle(paste(.$sample[1]))),
ncol = 5, nrow=12)
export_df %>%
group_by(sample) %>%
group_split() %>%
map(find_max_growthrate) %>%
bind_rows()
# Calculate all the indivdual growth rates
# I change thegrowthrate function because there are not 200 data points available
export_df <-
aligned_df%>%
group_by(sample) %>%
group_split() %>%
map(find_growthrate) %>%
bind_rows() %>%
mutate(GFPdivOD = GFP/OD)
# Here I complete the export df with the times
export_df <-
export_df %>%
group_by(sample) %>%
group_split() %>%
map(find_exponential_end) %>%
bind_rows()
# Here I calculate the Growthrates
maximum_growthrates_export <-
export_df %>%
group_by(sample) %>%
group_split() %>%
map(find_max_growthrate) %>%
bind_rows()
saveRDS(export_df, "export_df.rda")
saveRDS(maximum_growthrates_export, "growthrates.rda")
ggarrange(plotlist=
export_df %>%
group_by(sample) %>%
group_split() %>%
map(~ggplot(.x, aes_string(x = 'Time', y = 'growth_rate')) +
geom_point()+
geom_vline(aes(xintercept = exponential_end))+
graph_theme+
ggtitle(paste(.$sample[1]))),
ncol = 5, nrow=12)
ggsave('all_growthrates.png', height = 30, width = 15)
split_final <- export_df %>%
filter(OD>0.02) %>%
group_by(group, sample) %>%
group_split()
MZ_list <- split_final[1:25]
split_final <- export_df %>%
filter(OD>0.02) %>%
group_by(group, sample) %>%
group_split()
MZ_list <- split_final[1:15]
WT_list <- split_final[16:30]
split_final <- export_df %>%
filter(OD>0.02) %>%
group_by(group, sample) %>%
group_split()
MZ_list <- split_final[1:10]
WT_list <- split_final[11:20]
final_ODdivGFP.long <- map2(MZ_list, WT_list, create_final_single_run) %>%
bind_rows() %>%
drop_na()
summarised_ODdivGFP.long <- final_ODdivGFP.long %>%
group_by(group, Time) %>%
summarise(Time = Time, meanGFPdivOD = mean(GFPdivOD), no = n(), stdev = sd(GFPdivOD)) %>%
mutate(GFPlower = meanGFPdivOD-stdev, GFPupper = meanGFPdivOD+stdev) %>%
drop_na()
final_ODdivGFP.long %>%
ggplot(aes(x=Time, y=GFPdivOD, group= Condition, colour = group)) +
geom_line(size=0.25)+
#geom_ribbon(aes(x=Time, ymin=GFPlower, ymax=GFPupper, fill = group), show.legend =FALSE, colour=NA, alpha = 0.5)+
scale_colour_manual(
values = c( "#7B4252","#735F80","#4B819A", "#319F8F", "#6FB46C", "#C5BC50"),
labels =  c("0mM_sucrose", "200mM_sucrose", "400mM_sucrose", "600mM_sucrose", "800mM_sucrose", "1000mM_sucrose")
)+
scale_fill_manual(
values = c( "#7B4252","#735F80","#4B819A", "#319F8F", "#6FB46C", "#C5BC50"),
labels =  c("0mM_sucrose", "200mM_sucrose", "400mM_sucrose", "600mM_sucrose", "800mM_sucrose", "1000mM_sucrose")
)+
graph_theme
ggsave("GFP over time.png")
summarised_ODdivGFP.long %>%
ggplot(aes(x=Time, y=meanGFPdivOD, colour = group)) +
geom_line(size=0.25)+
geom_ribbon(aes(x=Time, ymin=GFPlower, ymax=GFPupper, fill = group), show.legend =FALSE, colour=NA, alpha = 0.5)+
scale_colour_manual(
values = c( "#7B4252","#735F80","#4B819A", "#319F8F", "#6FB46C", "#C5BC50"),
labels =  c("0mM_sucrose", "200mM_sucrose", "400mM_sucrose", "600mM_sucrose", "800mM_sucrose", "1000mM_sucrose")
)+
scale_fill_manual(
values = c( "#7B4252","#735F80","#4B819A", "#319F8F", "#6FB46C", "#C5BC50"),
labels =  c("0mM_sucrose", "200mM_sucrose", "400mM_sucrose", "600mM_sucrose", "800mM_sucrose", "1000mM_sucrose")
)+
graph_theme
ggsave("meanGFP over time.png")
View(maximum_growthrates_export)
